kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: {{ CLUSTER_NAME }}-controlplane
spec:
  replicas: 1
  version: {{ KUBERNETES_VERSION }}
  infrastructureTemplate:
    kind: Metal3MachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/{{ CAPI_VERSION }}
    name: {{ CLUSTER_NAME }}-controlplane
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        name: {{ " '{{ ds.meta_data.name }}' " }}
        kubeletExtraArgs:
          node-labels: 'metal3.io/uuid={{ '{{ ds.meta_data.uuid }}' }}'
          provider-id: 'metal3://{{ '{{ ds.meta_data.uuid }}' }}'
    joinConfiguration:
      nodeRegistration:
        name: {{ " '{{ ds.meta_data.name }}' " }}
        kubeletExtraArgs:
          node-labels: 'metal3.io/uuid={{ '{{ ds.meta_data.uuid }}' }}'
          provider-id: 'metal3://{{ '{{ ds.meta_data.uuid }}' }}'
    clusterConfiguration:
      apiServer:
        extraArgs:
    preKubeadmCommands:
      - ip link set dev enp2s0 up
      - dhclient enp2s0
      - mv /tmp/akeys /home/ubuntu/.ssh/authorized_keys
      - chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys
      - apt update -y
      - netplan apply
      - >-
        apt install net-tools gcc linux-headers-$(uname -r) bridge-utils
        apt-transport-https ca-certificates curl gnupg-agent
        software-properties-common -y
      - apt install -y keepalived && systemctl stop keepalived
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      - echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
      - apt update -y
      - apt install docker-ce docker-ce-cli containerd.io -y
      - echo  "Installing kubernetes binaries"
      - curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/{{KUBERNETES_BINARIES_VERSION}}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
      - chmod a+x kubeadm kubelet kubectl
      - mv kubeadm kubelet kubectl /usr/local/bin/
      - mkdir -p /etc/systemd/system/kubelet.service.d
      - curl -sSL "https://raw.githubusercontent.com/kubernetes/kubernetes/{{KUBERNETES_BINARIES_VERSION}}/build/debs/kubelet.service" | sed "s:/usr/bin:/usr/local/bin:g" > /etc/systemd/system/kubelet.service
      - curl -sSL "https://raw.githubusercontent.com/kubernetes/kubernetes/{{KUBERNETES_BINARIES_VERSION}}/build/debs/10-kubeadm.conf" | sed "s:/usr/bin:/usr/local/bin:g" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      - systemctl enable --now docker kubelet
      - if (curl -sk --max-time 10 https://{{ CLUSTER_APIENDPOINT_HOST }}:6443/healthz); then echo "keepalived already running";else systemctl start keepalived; fi
      - usermod -aG docker ubuntu
    postKubeadmCommands:
      - mkdir -p /home/ubuntu/.kube
      - cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      - systemctl enable --now keepalived
      - chown ubuntu:ubuntu /home/ubuntu/.kube/config
    files:
        - path: /etc/keepalived/keepalived.conf
          content: |
            ! Configuration File for keepalived
            global_defs {
                notification_email {
                sysadmin@example.com
                support@example.com
                }
                notification_email_from lb@example.com
                smtp_server localhost
                smtp_connect_timeout 30
            }
            vrrp_instance VI_2 {
                state MASTER
                interface enp2s0
                virtual_router_id 2
                priority 101
                advert_int 1
                virtual_ipaddress {
                    {{ CLUSTER_APIENDPOINT_HOST }}
                }
            }
        - path: /etc/netplan/51-cloud-config.yaml
          owner: root:root
          permissions: '0644'
          content: |
            network:
                ethernets:
                    enp2s0:
                        dhcp4: true
                    enp1s0:
                        dhcp4: false
                version: 2
        - path: /tmp/akeys
          owner: root:root
          permissions: '0644'
          content: {{ SSH_PUB_KEY_CONTENT }}
        - path : /etc/netplan/52-ironicendpoint.yaml
          owner: root:root
          permissions: '0644'
          content: |
            network:
              version: 2
              renderer: networkd
              bridges:
                ironicendpoint:
                  interfaces: [enp1s0]
                  dhcp4: yes
---
apiVersion: infrastructure.cluster.x-k8s.io/{{ CAPI_VERSION }}
kind: Metal3MachineTemplate
metadata:
  name: {{ CLUSTER_NAME }}-controlplane
spec:
  template:
    spec:
      image:
        url: {{ IMAGE_URL }}
        checksum: {{ IMAGE_CHECKSUM }}
